// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// MatSplit
Rcpp::List MatSplit(const arma::mat& A, const arma::mat& B, const arma::uvec& splitind);
RcppExport SEXP BeQTLR_MatSplit(SEXP ASEXP, SEXP BSEXP, SEXP splitindSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type splitind(splitindSEXP);
    __result = Rcpp::wrap(MatSplit(A, B, splitind));
    return __result;
END_RCPP
}
// RMSE
arma::mat RMSE(const arma::Mat<double>& TrainCor, const arma::Mat<double>& TestCor, const Rcpp::NumericVector& dim);
RcppExport SEXP BeQTLR_RMSE(SEXP TrainCorSEXP, SEXP TestCorSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type TrainCor(TrainCorSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<double>& >::type TestCor(TestCorSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type dim(dimSEXP);
    __result = Rcpp::wrap(RMSE(TrainCor, TestCor, dim));
    return __result;
END_RCPP
}
// MAD
arma::vec MAD(const arma::mat& TrainCor, const arma::mat& TestCor, bool isMedian);
RcppExport SEXP BeQTLR_MAD(SEXP TrainCorSEXP, SEXP TestCorSEXP, SEXP isMedianSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type TrainCor(TrainCorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type TestCor(TestCorSEXP);
    Rcpp::traits::input_parameter< bool >::type isMedian(isMedianSEXP);
    __result = Rcpp::wrap(MAD(TrainCor, TestCor, isMedian));
    return __result;
END_RCPP
}
// PointCor
arma::mat PointCor(const arma::mat& A, const arma::mat& B);
RcppExport SEXP BeQTLR_PointCor(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    __result = Rcpp::wrap(PointCor(A, B));
    return __result;
END_RCPP
}
// GenBoot
arma::umat GenBoot(const int samplesize, const int bootstrapnumber);
RcppExport SEXP BeQTLR_GenBoot(SEXP samplesizeSEXP, SEXP bootstrapnumberSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type samplesize(samplesizeSEXP);
    Rcpp::traits::input_parameter< const int >::type bootstrapnumber(bootstrapnumberSEXP);
    __result = Rcpp::wrap(GenBoot(samplesize, bootstrapnumber));
    return __result;
END_RCPP
}
// BeQTL
arma::mat BeQTL(const arma::mat& A, const arma::mat& B, const arma::umat& Bootmat);
RcppExport SEXP BeQTLR_BeQTL(SEXP ASEXP, SEXP BSEXP, SEXP BootmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type Bootmat(BootmatSEXP);
    __result = Rcpp::wrap(BeQTL(A, B, Bootmat));
    return __result;
END_RCPP
}
